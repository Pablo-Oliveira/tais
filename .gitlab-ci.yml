image: python:3.6-slim

stages:
#  - test style
#  - validate format
#  - test stories
#  - build
  - deploy

variables:
  BOT_LATEST_IMAGE: $CI_REGISTRY_IMAGE/bot:latest
  WEB_LATEST_IMAGE: $CI_REGISTRY_IMAGE/web:latest

.cache: &cache
  cache:
    key: "$CI_BUILD_REF_NAME"
    paths:
      - venv/
      - .pip

.prepare_tests_dependencies: &tests_dependencies
  before_script:
    - python -m pip install --upgrade pip
    - pip install virtualenv
    - virtualenv venv
    - pip -V
    - python -V # Print out python version for debugging
    - source venv/bin/activate
    - mkdir -p .pip
    - pip --cache-dir=.pip install -r dev.requirements.txt
    - echo $CI_PROJECT_DIR

#.set_private_key: &set_private_key
#  before_script:
#    - 'which ssh-agent || ( apt-get update && apt-get install -y openssh-client )'
#    - eval "$(ssh-agent -s)"
#    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
#    - mkdir -p ~/.ssh
#    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

#.set_private_key: &set_private_key
#  before_script:
#    - 'which ssh-agent || ( apt-get update && apt-get install -y openssh-client )'
#    - eval "$(ssh-agent -s)"
#    - mkdir -p ~/.ssh
#    - chmod 700 ~/.ssh
#    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
#    - chmod 600 ~/.ssh/id_rsa
#    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
#    #- eval "ssh-agent -s"
#    - eval `ssh-agent`
#    - echo -e "\n" | ssh-add ~/.ssh/id_rsa
#    #- printf '%s\n' "$SSH_PRIVATE_KEY" | ssh-add -
#    - ssh-keyscan -H $DEPLOY_SERVER_IP >> ~/.ssh/known_host

.set_ssh_config: &set_ssh_config
  before_script:
    - apt-get update -y
    - apt-get install sshpass -y

#before_script:
#    - yum install which -y
#    # install ssh-agent if not already installed, it is required by docker
#    - 'which ssh-agent || ( yum install openssh-clients -y )'
#    # run ssh-agent (inside the build environment)
#    - eval $(ssh-agent -s)
#    # add the ssh key stored in SSH_PRIVATE_KEY variable to the agent store
#    - ssh-add <(echo "$SSH_PRIVATE_KEY")
#    # for docker builds disable host key checking although this can lead to
#    # mitm attacks; only use this in docker or it will overwrite the host
#    # ssh config!
#    - mkdir -p ~/.ssh
#    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'


#test style:
#  stage: test style
#  <<: *cache
#  <<: *tests_dependencies
#  script:
#    - pip -V
#    - python -V # Print out python version for debugging
#    - flake8 --exclude venv
#
#run dataset validator:
#  stage: validate format
#  <<: *cache
#  script:
#    - python -m pip install --upgrade pip
#    - source venv/bin/activate
#    - pip install -r bot.requirements.txt
#    - cd bot/
#    - flake8 --exclude venv
#    - make run-validator
#  only:
#    - add_ci_and_cd

#test stories:
#  stage: test stories
#  <<: *cache
#  script:
#    - source venv/bin/activate
#    - cd bot/
#    - make e2e

#build_bot:
#  stage: build
#  image: docker:latest
#  services:
#    - docker:dind
#  script:
#    - docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" $CI_REGISTRY
#
#    - docker build -f docker/bot.Dockerfile -t $BOT_LATEST_IMAGE .
#    - docker push $BOT_LATEST_IMAGE
#
#    - docker build -f docker/web.Dockerfile -t $WEB_LATEST_IMAGE .
#    - docker push $WEB_LATEST_IMAGE
#  only:
#    refs:
#      - add_ci_and_cd
#    except:
#      changes:
#        - web
#  environment: homolog
#  tags:
#    - docker

#deploy_bot_to_homolog:
#  stage: deploy
#  <<: *set_ssh_config
#  script:
#    - ./scripts/deploy_service.sh $TAIS_SERVER_PASSWORD $TAIS_SERVER_IP bot $BOT_LATEST_IMAGE

deploy_web_to_homolog:
  stage: deploy
  <<: *set_ssh_config
  only:
    - add_ci_and_cd
  script:
    - ./scripts/deploy_service.sh $TAIS_SERVER_PASSWORD $TAIS_SERVER_IP web $WEB_LATEST_IMAGE
  environment: homolog
